# General Python
__pycache__/
*.pyc
*.pyo
*.pyd
*pip-log.txt
pip-delete-this-directory.txt

# Environments
.Python
env/
venv/
.venv/
ENV/
env.bak/
venv.bak/

# IDEs and editors
.vscode/
.idea/
*.project
*.tmproj
*.sublime-workspace

# Databases
*.db
*.sqlite3
# If you have other database files in development, add them

# Secrets / Sensitive files (should ideally be managed outside repo anyway)
.env
secrets.py
*.pem
*.key

# OS-specific
.DS_Store
Thumbs.db

# Testing
.pytest_cache/
.coverage
htmlcov/
nosetests.xml
coverage.xml
*.cover
*.log

# ML model artifacts and data (if not intended to be baked into the image)
# app/ml_model/artifacts/* # Already handled by volume mount, but good to ignore if source is large
# app/ml_model/data/*      # Usually large, should be managed separately or via volumes

# Specific to this project if any local dev files are not needed
# e.g. local_settings.py (if used and not in .gitignore)
# user_data/ # if this contains user-specific browser sessions not for image
# user_sessions/ # if this contains user-specific browser sessions not for image
# screenshots/ # if these are test outputs not for image

# alembic's .DS_Store from provided ls
alembic/.DS_Store
alembic/versions/.DS_Store
alembic/versions/__pycache__/.DS_Store
app/db/app.db # Assuming this is a local SQLite dev db and should not be in image

# From the extensive ls output, these might be user-specific or runtime generated
# data/ # (at root, if it's different from backend/data)
# backend/autobidder.db # Example if it's a local dev db
# backend/data/ # (if it contains large files not for the image)
# backend/screenshots/
# backend/user_data/
# backend/user_sessions/
# backend/app/db/app.db # already added

# Ensure these are not accidentally included if they are large or user-specific.
# For this exercise, focusing on common ignores and python-specific ones.
# The volume mounts in docker-compose handle persistent data and artifacts.
# The Dockerfile copies only necessary app code and configs.
