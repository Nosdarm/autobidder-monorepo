from uuid import uuid4
from sqlalchemy.orm import Session
from fastapi import HTTPException
from datetime import datetime

from app.models.bid import Bid
from app.models.profile import Profile
from app.models.bid_outcome import BidOutcome # Added import
from app.schemas.bid import BidCreateInput
from app.schemas.bid_outcome import BidOutcomeCreate # Added import


def create_bid_service(data: BidCreateInput, user_id: str, db: Session):
    # Проверка профиля
    profile = db.query(Profile).filter(Profile.id == data.profile_id, Profile.owner_id == user_id).first()
    if not profile:
        raise HTTPException(status_code=403, detail="Вы не можете делать ставки от имени этого профиля")

    new_bid = Bid(
        id=str(uuid4()),
        profile_id=data.profile_id,
        job_id=data.job_id, # This assumes job_id is a valid UUID string for an existing Job
        amount=data.amount,
        submitted_at=datetime.utcnow(),
        prompt_template_id=data.prompt_template_id,
        generated_bid_text=data.generated_bid_text,
        bid_settings_snapshot=data.bid_settings_snapshot
    )
    db.add(new_bid)
    db.commit()
    db.refresh(new_bid)
    return new_bid


def get_user_bids_service(user_id: str, db: Session):
    return db.query(Bid).join(Profile).filter(Profile.owner_id == user_id).all()


def get_all_bids_service(db: Session):
    return db.query(Bid).all()


def create_bid_outcome_service(db: Session, bid_id: str, outcome_data: BidOutcomeCreate) -> BidOutcome:
    """
    Creates a new bid outcome for a given bid.
    """
    # Verify Bid Existence
    db_bid = db.query(Bid).filter(Bid.id == bid_id).first()
    if not db_bid:
        raise HTTPException(status_code=404, detail="Bid not found")

    # Create BidOutcome object
    # BidOutcome.id is generated by default in the model
    db_outcome = BidOutcome(
        bid_id=bid_id, # or db_bid.id
        outcome_timestamp=outcome_data.outcome_timestamp, # This comes from the input, or defaults in schema
        is_success=outcome_data.is_success,
        details=outcome_data.details
    )

    # Database operations
    db.add(db_outcome)
    db.commit()
    db.refresh(db_outcome)

    return db_outcome
