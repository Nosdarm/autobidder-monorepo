// frontend-app/src/services/profileService.ts

export interface Profile {
  id: string;
  name: string;
  profile_type: 'personal' | 'agency';
  autobid_enabled: boolean;
  user_id: string;
  skills?: string[];
  experience_level?: string;
  // Ensure this matches the structure your components expect, e.g., for createdAt
  createdAt?: string | Date; 
}

// For creating profiles, ID is generated by the mock service, user_id is static for mock
export interface NewProfileData {
  name: string;
  profile_type: 'personal' | 'agency';
  autobid_enabled?: boolean;
  skills?: string[];
  experience_level?: string;
  createdAt?: string; // Or Date
}

// For updating profiles
export interface UpdateProfileData {
  name?: string;
  profile_type?: 'personal' | 'agency';
  autobid_enabled?: boolean;
  skills?: string[];
  experience_level?: string;
  createdAt?: string; // Or Date
}

export let mockProfilesDB: Profile[] = [
  { id: '1', name: 'John Doe - Personal', profile_type: 'personal', autobid_enabled: true, user_id: 'user1', skills: ['React', 'Node.js'], experience_level: 'Senior', createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString() },
  { id: '2', name: 'Agency Alpha', profile_type: 'agency', autobid_enabled: false, user_id: 'user2', skills: ['Project Management', 'Client Relations'], experience_level: 'N/A', createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10).toISOString() },
  { id: '3', name: 'Jane Smith - Freelancer', profile_type: 'personal', autobid_enabled: true, user_id: 'user3', skills: ['Vue', 'Firebase', 'Go'], experience_level: 'Mid-level', createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString() },
  { id: '4', name: 'Tech Solutions Ltd.', profile_type: 'agency', autobid_enabled: true, user_id: 'user4', skills: ['DevOps', 'AWS', 'CI/CD'], experience_level: 'N/A', createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 15).toISOString() },
];

const SIMULATED_DELAY = 400;

export const fetchProfiles = async (): Promise<Profile[]> => {
  return new Promise(resolve => {
    setTimeout(() => {
      // Return deep copies to prevent direct mutation of the mock DB from outside
      resolve(JSON.parse(JSON.stringify(mockProfilesDB)));
    }, SIMULATED_DELAY);
  });
};

export const fetchProfile = async (id: string): Promise<Profile | undefined> => {
  return new Promise(resolve => {
    setTimeout(() => {
      const profile = mockProfilesDB.find(p => p.id === id);
      resolve(profile ? JSON.parse(JSON.stringify(profile)) : undefined);
    }, SIMULATED_DELAY);
  });
};

export const createProfile = async (data: NewProfileData): Promise<Profile> => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (data.name && data.name.toLowerCase().includes('error')) {
        reject(new Error('Simulated error: Profile creation failed.'));
        return;
      }
      const newProfile: Profile = {
        id: Date.now().toString(),
        user_id: 'user_static_created', // Static user_id for created profiles in mock
        ...data,
        autobid_enabled: data.autobid_enabled ?? false,
        createdAt: data.createdAt || new Date().toISOString(), // Ensure createdAt is set
      };
      mockProfilesDB.push(newProfile);
      resolve(JSON.parse(JSON.stringify(newProfile)));
    }, SIMULATED_DELAY);
  });
};

export const updateProfile = async (id: string, data: UpdateProfileData): Promise<Profile | undefined> => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (data.name && data.name.toLowerCase().includes('error')) {
        reject(new Error('Simulated error: Profile update failed.'));
        return;
      }
      const profileIndex = mockProfilesDB.findIndex(p => p.id === id);
      if (profileIndex !== -1) {
        mockProfilesDB[profileIndex] = { ...mockProfilesDB[profileIndex], ...data };
        resolve(JSON.parse(JSON.stringify(mockProfilesDB[profileIndex])));
      } else {
        resolve(undefined); // Or reject(new Error('Profile not found'))
      }
    }, SIMULATED_DELAY);
  });
};

export const deleteProfile = async (id: string): Promise<void> => {
  return new Promise(resolve => {
    setTimeout(() => {
      mockProfilesDB = mockProfilesDB.filter(p => p.id !== id);
      resolve();
    }, SIMULATED_DELAY);
  });
};