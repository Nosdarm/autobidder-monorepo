# app/browser/browser_bidder.py
import os
import asyncio
import random
from playwright.async_api import async_playwright
from app.services.captcha_service import solve_cloudflare
from app.services.job_store import is_job_seen, save_job

USER_DATA_DIR = "user_data"


async def run_browser_bidder_for_profile(profile_id: str):
    print(f"[‚ñ∂Ô∏è START] –ü—Ä–æ—Ñ–∏–ª—å {profile_id}")
    profile_dir = os.path.join(USER_DATA_DIR, profile_id)

    if not os.path.exists(profile_dir):
        print(f"[‚ùå] user_data_dir –Ω–µ –Ω–∞–π–¥–µ–Ω: {profile_dir}")
        return

    async with async_playwright() as p:
        context = await p.chromium.launch_persistent_context(
            user_data_dir=profile_dir,
            headless=False
        )
        page = await context.new_page()
        await page.goto("https://www.upwork.com/")

        # üëÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—á—É –æ—Ç Cloudflare
        if await page.locator('[data-sitekey]').count() > 0:
            print("[‚ö†Ô∏è] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å...")
            sitekey = await page.get_attribute('[data-sitekey]', 'data-sitekey')
            token = await solve_cloudflare("https://www.upwork.com/", sitekey)

            await page.evaluate(
                "document.querySelector('textarea[name=\"g-recaptcha-response\"]')"
                ".value = arguments[0];",
                token
            )

            print("[‚úÖ] –¢–æ–∫–µ–Ω –≤—Å—Ç–∞–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            await page.reload()
            await asyncio.sleep(5)

        # üîÅ –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await page.mouse.move(200, 300)
        await asyncio.sleep(1)
        await page.mouse.wheel(0, 1000)
        await asyncio.sleep(1)
        await page.keyboard.press("Tab")
        await page.keyboard.type("python")
        await asyncio.sleep(1)

        # ‚è≥ –ñ–¥—ë–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–∏–∫–æ–º (1‚Äì10 –º–∏–Ω—É—Ç)
        delay = random.randint(60, 600)
        print(f"[‚è±Ô∏è] –ñ–¥—ë–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–∏–∫–æ–º...")
        await asyncio.sleep(delay)

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤
        await page.goto("https://www.upwork.com/ab/find-work/")
        title = await page.title()
        url = page.url
        print(f"[‚úÖ OK] –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {title}")
        print(f"[INFO] URL: {url}")

        try:
            await page.wait_for_selector("a[data-cy='user-settings-menu']", timeout=5000)
            print(f"[‚úÖ] –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç: —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–π–¥–µ–Ω")
        except BaseException:
            print(f"[‚ö†Ô∏è] –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚Äî —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # üì• –°–±–æ—Ä –¥–∂–æ–±–æ–≤
        job_cards = await page.locator(".job-tile-title a").all()
        jobs = []
        for job in job_cards:
            title = await job.inner_text()
            href = await job.get_attribute("href")
            job_id = href.strip().split("/")[-1]
            # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç URL

            if is_job_seen(job_id):
                print(f"[‚è≠Ô∏è] –£–∂–µ –≤–∏–¥–µ–ª–∏: {job_id} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            full_link = f"https://www.upwork.com{href}"
            jobs.append(
                {"id": job_id, "title": title.strip(), "link": full_link})
            save_job(job_id, title.strip(), full_link, profile_id)

        print(f"[üìã] –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(jobs)}")

        for job in jobs:
            print(f"[‚û°Ô∏è] –û—Ç–∫—Ä—ã–≤–∞–µ–º: {job['title']}\n   {job['link']}")
            try:
                await page.goto(job['link'])
                await asyncio.sleep(2)
                await page.wait_for_selector("text='Submit a proposal'", timeout=5000)
                await page.click("text='Submit a proposal'")
                await asyncio.sleep(3)
                print(f"[‚úÖ] –û—Ç–∫—Ä—ã—Ç–∞ —Ñ–æ—Ä–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏")
                screenshot_path = (
                    f"screenshots/{profile_id}_{job['id']}_proposal.png"
                )
                os.makedirs("screenshots", exist_ok=True)
                await page.screenshot(path=screenshot_path)
                print(f"[üì∑] –°–∫—Ä–∏–Ω—à–æ—Ç —Ñ–æ—Ä–º—ã: {screenshot_path}")
            except Exception as e:
                print(f"[‚ö†Ô∏è] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {job['link']}: {e}")

        await asyncio.sleep(3)
        await context.close()
